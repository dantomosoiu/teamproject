



\section{Major Problems Encountered \& Future Work}

Whilst in many ways the project was a success due to several problems
we failed to meet the full set of expected requirements (must have
and should have). This section summarises the major issues that occured
and why. Further to this an explanation of how the work should be
continued based from experience so far is provided.


\subsection{Problems Encountered}


\subsubsection{jMonkey}

We had several issues with the engine, most related to an underestimation
of its complexity. This was partially down to poor documentation but
also due to inadequite research into the system before commencing
implementation.

The jMonkey has extensive tutorials, however these are aimed at games
development. The material soon got to a point where most of it was
useless for our needs. This led us to abandon them quite early on.
Unfortunately this led several members of the team with a poor understanding
of the system, an example being how the update loop worked. This was
not spotted until later on in the code as the heavier processing slowed
things down causing the race conditions to show themselves. By this
point finding and correcting all occurances was a major task.

From a documentation side whilst there is plenty available it does
not seem well indexed. If you have an issue finding the answer is
not as simple as a quick search but instead requires trawling through
the manual until stumbling upon the information required.


\subsubsection{NavMesh Generation}

The NavMesh package we used was based from an extremely powerful implementation
in C++, Recast. Unlike the original instead of being implemented for
speed it was created for educational purposes. It was also not well
documented but claimed to be fully functional.

Throughout the project we encountered several problems with the generation
of meshes. The largest of these was an inability to work with overlapping
navigatable surfaces (ie multiple floors in a building). Overcoming
this required large amounts of modification at a heavy cost in time.


\subsubsection{Modelling Issues}

An issue we had failed to consider when choosing our initial location
was the complexity of the structure. The curved floors proved a serious
challenge considering the teams lack of experience with advanced modelling.
This was somewhat negated due to the issues with the NavMesh. The
models generated became far more complex than we could convert and
so are unused in the end product.

The other key issue with the modelling relates to the ship plans provided.
Upon completion of each of the deck plans these neede to be merged
together into one model. It was then we realised the plans did not
align. This required heavy modification to fit the stairways into
place.


\subsubsection{Population Architecture Mistakes } %%Rename or remove
At the moment, although coded, almost none of the agent behaviour discussed previously is in usage. This was the result of a design problem which restricted the capability to correctly tie the behavioural algorithms to the agents.\\
As discussed in the Agent Implementation \ref{Imp:sec:perceiveDecideAct} \& Design sections \ref{Des:sec:population}, an agent's route is calculated in a two stage process, at the end of which a MotionPath is produced. This design emerged as the result of difficulties in reaching the aims of Prototype 2.\\
To give an agent the required individual behaviour, the system must be able to:
\begin{enumerate}
\item{Stop an agent. From the position at which they were stopped, calculate a new route to a chosen target. Rest art the agent to continue down this route.}
\item{Access an agent's position at any time}
\end{enumerate}
Both of the above conditions need to be performed from a synchronised context. Unfortunately neither of these are possible in the current Population package architecture. The implementation of MotionPath heavily restricts access to an agent's position. While it is possible to stop an agent moving, no method has been found for triggering this in a meaningful sense that does not result in a system crash or thread deadlocking.\\
This design occurred because the routing procedures and behavioural algorithms were developed in parallel. Since they were built up in incremental prototypes \ref{Team:subsec:process}, the challenges associated with merging these two aspects were not considered until late in the project. This could have been addressed with a partial reimplementation of the Population package, but the extensive problems with the navigation mesh found during stage 3 \ref{Proto:sec:main} meant that the individual behaviour features were ultimately dropped.\\










%%%% HECTOR TAKE CARE OF THIS REFERENCE




Nevertheless, we present an overview of the correct solution in section \ref{hectorneedstoaddthisshit}. We are confident that should the proposed reimplementation be carried out that it would be relatively simple to tie the behavioural methods to agents effectively.



%%%% HECTOR TAKE CARE OF THIS REFERENCE







\subsection{Future Work}

Below is listed in order of priority the next steps we shall take
if the project is continued


\subsubsection{Implementation of a thread-pool and rewriting of the Person Class}

The Person Class was developed early on and as such was built before
we had a clear understanding of the technologies being used. As such
it was built upon a bad methodology upon which the class relies too
heavily to allow easy repair. Hence it seems more appropriate to rewrite
it from scratch.

Further to this currently each person is represented by an individual
thread. This requires considerable overhead and is one of the key
performance bottlenecks in the existing system. By converting a person
to an abstract data structure and having a threadpool of worker threads
iterating over these major decreases in waste could be overcome.


\subsubsection{Use of D{*} algorithm}

Currently A{*}\cite{Astar} is used to generate routes. By using an extension of this instead, D{*} \cite{Dstar}, these would support accounting for real-time changes in the environment due to various hazards such as fire or smoke.


\subsubsection{Use of ORCA for collision avoidance}

Due to the large number of people our system is aimed to support collsion
control and avoidance needs to be properly implemented. Currently
individuals are perfectly able to pass through oneanother. ORCA (Optimal
Reciprocal Collision Avoidance) \ref{ORCA} is an advanced set of algorithms designed
to aid with this.


\subsubsection{Implementation of an advanced behavioural Model}

Due to the issues relating to understanding of the underlying engine
work here had to be temporarily suspended. As a result of this the
current model is severely lacking. Once the person class has been
re-created in a way able to support this properly it could be continued
allowing the functionality originally envisioned at the start of the
project.


\subsubsection{Improvement of model importation and removal of maritime phrases}

The project was always intended to be flexible towards a number of
environments. Currently the importer is poor and allows no modification
of the NavMesh generation variables. There are also several words
used within the GUI hinting towards a maritime use (such as Show Far-Side
Hull on the main sidepanel). These counteract our aims by suggesting
the software to be bespoke.


\subsubsection{Addition of hazards and assurances into the model}

In a real situation there are multiple stimuli affecting human behaviour.
Exit signs entice those trying to escape whilst the majority of people
adhere to no enty indications.

Hence additional environmental features should be added to assist
with the behavioural model.


\subsubsection{Accurate fire and smoke representation}

This links in heavily with the previous suggestion. Fire and smoke
spread and so a dynamic model for these is required to further improve
correct simulation of a real life event.

