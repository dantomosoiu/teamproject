#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
Major Problems Encountered & Future Work
\end_layout

\begin_layout Standard
Whilst in many ways the project was a success due to several problems we
 failed to meet the full set of expected requirements (must have and should
 have).
 This section summarises the major issues that occured and why.
 Further to this an explanation of how the work should be continued based
 from experience so far is provided.
\end_layout

\begin_layout Subsection
Problems Encountered
\end_layout

\begin_layout Subsubsection*
jMonkey
\end_layout

\begin_layout Standard
We had several issues with the engine, most related to an underestimation
 of its complexity.
 This was partially down to poor documentation but also due to inadequite
 research into the system before commencing implementation.
\end_layout

\begin_layout Standard
The jMonkey has extensive tutorials, however these are aimed at games developmen
t.
 The material soon got to a point where most of it was useless for our needs.
 This led us to abandon them quite early on.
 Unfortunately this led several members of the team with a poor understanding
 of the system, an example being how the update loop worked.
 This was not spotted until later on in the code as the heavier processing
 slowed things down causing the race conditions to show themselves.
 By this point finding and correcting all occurances was a major task.
\end_layout

\begin_layout Standard
From a documentation side whilst there is plenty available it does not seem
 well indexed.
 If you have an issue finding the answer is not as simple as a quick search
 but instead requires trawling through the manual until stumbling upon the
 information required.
\end_layout

\begin_layout Subsubsection*
NavMesh Generation
\end_layout

\begin_layout Standard
The NavMesh package we used was based from an extremely powerful implementation
 in C++, Recast.
 Unlike the original instead of being implemented for speed it was created
 for educational purposes.
 It was also not well documented but claimed to be fully functional.
\end_layout

\begin_layout Standard
Throughout the project we encountered several problems with the generation
 of meshes.
 The largest of these was an inability to work with overlapping navigatable
 surfaces (ie multiple floors in a building).
 Overcoming this required large amounts of modification at a heavy cost
 in time.
\end_layout

\begin_layout Subsubsection*
Modelling Issues
\end_layout

\begin_layout Standard
An issue we had failed to consider when choosing our initial location was
 the complexity of the structure.
 The curved floors proved a serious challenge considering the teams lack
 of experience with advanced modelling.
 This was somewhat negated due to the issues with the NavMesh.
 The models generated became far more complex than we could convert and
 so are unused in the end product.
\end_layout

\begin_layout Standard
The other key issue with the modelling relates to the ship plans provided.
 Upon completion of each of the deck plans these neede to be merged together
 into one model.
 It was then we realised the plans did not align.
 This required heavy modification to fit the stairways into place.
\end_layout

\begin_layout Subsection
Future Work
\end_layout

\begin_layout Standard
Below is listed in order of priority the next steps we shall take if the
 project is continued
\end_layout

\begin_layout Subsubsection*
Implementation of a thread-pool and rewriting of the Person Class
\end_layout

\begin_layout Standard
The Person Class was developed early on and as such was built before we
 had a clear understanding of the technologies being used.
 As such it was built upon a bad methodology upon which the class relies
 too heavily to allow easy repair.
 Hence it seems more appropriate to rewrite it from scratch.
\end_layout

\begin_layout Standard
Further to this currently each person is represented by an individual thread.
 This requires considerable overhead and is one of the key performance bottlenec
ks in the existing system.
 By converting a person to an abstract data structure and having a threadpool
 of worker threads iterating over these major decreases in waste could be
 overcome.
\end_layout

\begin_layout Subsubsection*
Use of D* algorithm
\end_layout

\begin_layout Standard
Currently A* is used to generate routes.
 By using D* instead these would support dynamic updating due to interactions
 with other members of the crowd or hazards.
\end_layout

\begin_layout Subsubsection*
Use of ORCA for collision avoidance
\end_layout

\begin_layout Standard
Due to the large number of people our system is aimed to support collsion
 control and avoidance needs to be properly implemented.
 Currently individuals are perfectly able to pass through oneanother.
 ORCA (Optimal Reciprocal Collision Avoidance) is an advanced set of algorithms
 designed to aid with this.
\end_layout

\begin_layout Subsubsection*
Implementation of an advanced behavioural Model
\end_layout

\begin_layout Standard
Due to the issues relating to understanding of the underlying engine work
 here had to be temporarily suspended.
 As a result of this the current model is severely lacking.
 Once the person class has been re-created in a way able to support this
 properly it could be continued allowing the functionality originally envisioned
 at the start of the project.
\end_layout

\begin_layout Subsubsection*
Improvement of model importation and removal of maritime phrases
\end_layout

\begin_layout Standard
The project was always intended to be flexible towards a number of environments.
 Currently the importer is poor and allows no modification of the NavMesh
 generation variables.
 There are also several words used within the GUI hinting towards a maritime
 use (such as Show Far-Side Hull on the main sidepanel).
 These counteract our aims by suggesting the software to be bespoke.
\end_layout

\begin_layout Subsubsection*
Addition of hazards and assurances into the model
\end_layout

\begin_layout Standard
In a real situation there are multiple stimuli affecting human behaviour.
 Exit signs entice those trying to escape whilst the majority of people
 adhere to no enty indications.
\end_layout

\begin_layout Standard
Hence additional environmental features should be added to assist with the
 behavioural model.
\end_layout

\begin_layout Subsubsection*
Accurate fire and smoke representation
\end_layout

\begin_layout Standard
This links in heavily with the previous suggestion.
 Fire and smoke spread and so a dynamic model for these is required to further
 improve correct simulation of a real life event.
\end_layout

\end_body
\end_document
